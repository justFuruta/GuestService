<?php

namespace App\Services\GuestService;

use App\Models\Guest;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Support\Collection;
use Illuminate\Support\Str;

class GuestService implements GuestServiceInterface
{

    private array $phoneCodeMapping = [
        '1' => 'Соединенные Штаты Америки',
        '7' => 'Россия',
        '20' => 'Египет',
        '27' => 'Южноафриканская Республика',
        '30' => 'Греция',
        '31' => 'Нидерланды',
        '32' => 'Бельгия',
        '33' => 'Франция',
        '34' => 'Испания',
        '36' => 'Венгрия',
        '39' => 'Италия',
        '40' => 'Румыния',
        '41' => 'Швейцария',
        '43' => 'Австрия',
        '44' => 'Великобритания',
        '45' => 'Дания',
        '46' => 'Швеция',
        '47' => 'Норвегия',
        '48' => 'Польша',
        '49' => 'Германия',
        '51' => 'Перу',
        '52' => 'Мексика',
        '53' => 'Куба',
        '54' => 'Аргентина',
        '55' => 'Бразилия',
        '56' => 'Чили',
        '57' => 'Колумбия',
        '58' => 'Венесуэла',
        '60' => 'Малайзия',
        '61' => 'Австралия',
        '62' => 'Индонезия',
        '63' => 'Филиппины',
        '64' => 'Новая Зеландия',
        '65' => 'Сингапур',
        '66' => 'Тайланд',
        '81' => 'Япония',
        '82' => 'Южная Корея',
        '84' => 'Вьетнам',
        '86' => 'Китай',
        '90' => 'Турция',
        '91' => 'Индия',
        '92' => 'Пакистан',
        '93' => 'Афганистан',
        '94' => 'Шри-Ланка',
        '95' => 'Мьянма',
        '98' => 'Иран',
        '212' => 'Марокко',
        '213' => 'Алжир',
        '216' => 'Тунис',
        '218' => 'Ливия',
        '220' => 'Гамбия',
        '221' => 'Сенегал',
        '222' => 'Мавритания',
        '223' => 'Мали',
        '224' => 'Гвинея',
        '225' => 'Кот-д’Ивуар',
        '226' => 'Буркина-Фасо',
        '227' => 'Нигер',
        '228' => 'Того',
        '229' => 'Бенин',
        '230' => 'Маврикий',
        '231' => 'Либерия',
        '232' => 'Сьерра-Леоне',
        '233' => 'Гана',
        '234' => 'Нигерия',
        '235' => 'Чад',
        '236' => 'Центральноафриканская Республика',
        '237' => 'Камерун',
        '238' => 'Кабо-Верде',
        '239' => 'Сан-Томе и Принсипи',
        '240' => 'Экваториальная Гвинея',
        '241' => 'Габон',
        '242' => 'Конго',
        '243' => 'Демократическая Республика Конго',
        '244' => 'Ангола',
        '245' => 'Гвинея-Бисау',
        '246' => 'Британская территория в Индийском океане',
        '248' => 'Сейшельские Острова',
        '249' => 'Судан',
        '250' => 'Руанда',
        '251' => 'Эфиопия',
        '252' => 'Сомали',
        '253' => 'Джибути',
        '254' => 'Кения',
        '255' => 'Танзания',
        '256' => 'Уганда',
        '257' => 'Бурунди',
        '258' => 'Мозамбик',
        '260' => 'Замбия',
        '261' => 'Мадагаскар',
        '262' => 'Реюньон',
        '263' => 'Зимбабве',
        '264' => 'Намибия',
        '265' => 'Малави',
        '266' => 'Лесото',
        '267' => 'Ботсвана',
        '268' => 'Свазиленд',
        '297' => 'Аруба',
        '298' => 'Фарерские Острова',
        '299' => 'Гренландия',
        '350' => 'Гибралтар',
        '351' => 'Португалия',
        '352' => 'Люксембург',
        '353' => 'Ирландия',
        '354' => 'Исландия',
        '355' => 'Албания',
        '356' => 'Мальта',
        '357' => 'Кипр',
        '358' => 'Финляндия',
        '359' => 'Болгария',
        '370' => 'Литва',
        '371' => 'Латвия',
        '372' => 'Эстония',
        '373' => 'Молдова',
        '374' => 'Армения',
        '375' => 'Беларусь',
        '376' => 'Андорра',
        '377' => 'Монако',
        '378' => 'Сан-Марино',
        '379' => 'Ватикан',
        '380' => 'Украина',
        '381' => 'Сербия',
        '382' => 'Черногория',
        '383' => 'Косово',
        '385' => 'Хорватия',
        '386' => 'Словения',
        '387' => 'Босния и Герцеговина',
        '420' => 'Чехия',
        '421' => 'Словакия',
        '423' => 'Лихтенштейн',
        '500' => 'Фолклендские Острова',
        '501' => 'Белиз',
        '502' => 'Гватемала',
        '503' => 'Сальвадор',
        '504' => 'Гондурас',
        '505' => 'Никарагуа',
        '506' => 'Коста-Рика',
        '507' => 'Панама',
        '508' => 'Французская Полинезия',
        '509' => 'Гаити',
        '590' => 'Гваделупа',
        '591' => 'Боливия',
        '592' => 'Гайана',
        '593' => 'Эквадор',
        '594' => 'Французская Гвиана',
        '595' => 'Парагвай',
        '596' => 'Мартиника',
        '597' => 'Суринам',
        '598' => 'Уругвай',
        '599' => 'Кюрасао',
        '670' => 'Восточный Тимор',
        '672' => 'Австралийская территория в Южном океане',
        '673' => 'Бруней',
        '674' => 'Науру',
        '675' => 'Папуа-Новая Гвинея',
        '676' => 'Тонга',
        '677' => 'Соломоновы Острова',
        '678' => 'Вануату',
        '679' => 'Фиджи',
        '680' => 'Палау',
        '681' => 'Уоллис и Футуна',
        '682' => 'Острова Кука',
        '683' => 'Ниуэ',
        '685' => 'Самоа',
        '686' => 'Кирибати',
        '687' => 'Новая Каледония',
        '688' => 'Тувалу',
        '689' => 'Французская Полинезия',
        '690' => 'Токелау',
        '691' => 'Федеративные Штаты Микронезия',
        '692' => 'Маршалловы Острова',
        '993' => 'Туркменистан',
        '994' => 'Азербайджан',
        '995' => 'Грузия',
        '996' => 'Кыргызстан',
        '997' => 'Казахстан',
        '998' => 'Узбекистан',
    ];

    public function getGuests(): LengthAwarePaginator
    {
        return Guest::query()
        ->paginate();
    }
    public function storeGuest(array $data, ?Guest $model = null): Guest
    {
        $data = Collection::wrap($data)->mapWithKeys(function ($item, $key) {
            return [Str::of($key)->snake()->toString() => $item];
        })->toArray();
        if (empty($data['country']) && is_null($model)) {
            $data['country'] = $this->determineCountry($data['phone']);
        }

        if (! is_null($model)) {
            $model->update($data);
        } else {
            $model = Guest::query()->create($data);
        }
        
        return $model;
    }

    public function deleteGuest(Guest $guest): void
    {
        $guest->delete();
        return;
    }

    private function determineCountry($phone): ?string
    {
        $code = $this->getLongestCountryCode($phone);
        // $code = Str::of($phone)->match('/^\+?([1-9]\d{0,2})[\s.-]?(\d{1,4})[\s.-]?(\d{7,15})$/')->toString();
        return $this->phoneCodeMapping[$code] ?? null;
    }

    private function getLongestCountryCode($phone): ?string
    {   
        $codes = array_keys($this->phoneCodeMapping);
        usort($codes, function($a, $b) {
            return strlen($b) - strlen($a);
        });
        
        foreach ($codes as $code) {
            if (strpos($phone, $code) === 0) {
                return $code;
            }
        }
        return null;
    }
}